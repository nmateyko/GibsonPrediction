configfile: "linear_config.yaml"

def get_input_fastqs(wildcards):
    sample_index = config["samples"][wildcards.sample]
    data_dir = config["data_dir"]
    return [
        f"{data_dir}/PX3270_{sample_index}/150bp/PX3270_{sample_index}_1_150bp_3_lanes.merge.fastq.gz",
        f"{data_dir}/PX3270_{sample_index}/150bp/PX3270_{sample_index}_2_150bp_3_lanes.merge.fastq.gz",
    ]

read = ['1', '2']
position = ['up', 'down']

rule all:
    localrule: True
    input:
        expand("output/counts/{sample}_{position}.txt", sample=config["samples"], position=position)

rule orient:
    input:
        get_input_fastqs
    output:
        "output/oriented/{sample}_up_1.fastq",
        "output/oriented/{sample}_up_2.fastq",
        "output/oriented/{sample}_down_1.fastq",
        "output/oriented/{sample}_down_2.fastq",
    log:
        "output/logs/orient/{sample}.log"
    conda:
        "environment.yaml"
    params:
        fwd_start="ATCTGTGGAATTGTGAGCGG",
        rev_start="ATCCGATTAAGTTGGGTAAC"
    threads: 1
    resources:
        mem_mb=4800,
        time="00:20:00",
    script: "scripts/orient_reads.py"


rule cutadapt_trim_PE:
    input:
        "output/oriented/{sample}_{position}_1.fastq",
        "output/oriented/{sample}_{position}_2.fastq",
    output: 
        r1=temp("output/trimmed/{sample}_{position}_1.fastq"),
        r2=temp("output/trimmed/{sample}_{position}_2.fastq")
    log:
        summary="output/logs/cutadapt/{sample}_{position}_cutadapt.log",
        untrimmed_1="output/logs/cutadapt/{sample}_{position}_untrimmed_1.fastq.gz",
        untrimmed_2="output/logs/cutadapt/{sample}_{position}_untrimmed_2.fastq.gz",
        short_1="output/logs/cutadapt/{sample}_{position}_short_1.fastq.gz",
        short_2="output/logs/cutadapt/{sample}_{position}_short_2.fastq.gz",
        long_1="output/logs/cutadapt/{sample}_{position}_long_1.fastq.gz",
        long_2="output/logs/cutadapt/{sample}_{position}_long_2.fastq.gz",
    conda:
        "environment.yaml"
    params:
        a1=lambda wildcards: config["adapters"][wildcards.position]["a1"],
        a2=lambda wildcards: config["adapters"][wildcards.position]["a2"],
        min_len=29,
        max_len=29,
    threads: 4
    resources:
        mem_mb=4800,
        time="00:20:00",
    shell:
        "cutadapt -j {threads} --untrimmed-o {log.untrimmed_1} --untrimmed-p {log.untrimmed_2} "
        "-m {params.min_len} --too-short-o {log.short_1} --too-short-p {log.short_2} "
        "-M {params.max_len} --too-long-o {log.long_1} --too-long-p {log.long_2} "
        "-a {params.a1} -A {params.a2} -O 10 -o {output.r1} -p {output.r2} {input} > {log.summary}"


rule pair:
    input:
        r1="output/trimmed/{sample}_{position}_1.fastq",
        r2="output/trimmed/{sample}_{position}_2.fastq"
    output: 
        temp("output/paired/{sample}_{position}.fastq")
    log:
        "output/logs/pair/pairing_failed_{sample}_{position}.log"
    conda:
        "environment.yaml"
    threads: 4
    resources:
        mem_mb=4800,
        time="01:00:00",
    shell:
        "../NGmerge/NGmerge -1 {input.r1} -2 {input.r2} -o {output} -y -f {log} -n {threads} -t /"
        

rule cluster:
    input:
        "output/paired/{sample}_{position}.fastq"
    output:
        "output/counts/{sample}_{position}.txt"
    log:
        "output/logs/starcode/{sample}_{position}_starcode.log"
    conda:
        "environment.yaml"
    params:
        distance=3
    threads: 8
    resources:
        mem_mb=38400,
        time="01:00:00",
    shell:
        "starcode -i {input} -o {output} -s -t {threads} -d {params.distance} > {log}"
